// Generated by CoffeeScript 1.6.3
(function() {
  window.EasyNote = (function() {
    EasyNote.prototype.WIDTH = Math.max((window.innerWidth / 100) * 50, 900);

    EasyNote.prototype.HEIGHT = null;

    EasyNote.prototype.LINE_SPACE = 20;

    EasyNote.prototype.PEN_SIZE_TINY = 2;

    EasyNote.prototype.PEN_SIZE_SMALL = 5;

    EasyNote.prototype.PEN_SIZE_MEDIUM = 10;

    EasyNote.prototype.PEN_SIZE_LARGE = 15;

    EasyNote.prototype.PEN_COLOR_RED = 'red';

    EasyNote.prototype.PEN_COLOR_GREEN = 'green';

    EasyNote.prototype.PEN_COLOR_BLUE = 'blue';

    EasyNote.prototype.PEN_COLOR_DEFAULT = 'black';

    EasyNote.prototype.background = null;

    EasyNote.prototype.canvas = null;

    EasyNote.prototype.activateEraser = function() {
      return this.canvas.startErasing();
    };

    EasyNote.prototype.activatePen = function() {
      return this.canvas.startDrawing();
    };

    EasyNote.prototype.setPenSize = function(size) {
      if (size && parseInt(size) !== NaN) {
        return this.canvas.penSize = size;
      }
    };

    EasyNote.prototype.setPenColor = function(color) {
      if (color !== this.PEN_COLOR_RED && color !== this.PEN_COLOR_GREEN && color !== this.PEN_COLOR_BLUE) {
        return this.canvas.penColor = this.PEN_COLOR_DEFAULT;
      } else {
        return this.canvas.penColor = color;
      }
    };

    EasyNote.prototype.regularPaper = function() {
      this.background.removeChildren();
      return this.background.draw();
    };

    EasyNote.prototype.graphPaper = function() {
      this.background.removeChildren();
      this.grid();
      return this.background.draw();
    };

    EasyNote.prototype.linedPaper = function() {
      this.background.removeChildren();
      this.makeRules('horizontal');
      return this.background.draw();
    };

    EasyNote.prototype.clearAll = function() {
      return this.canvas.clear();
    };

    EasyNote.prototype.showCanvas = function() {
      var cnv, w;
      cnv = this.canvas.getCanvas()._canvas;
      w = window.open();
      w.document.write('<img src="' + cnv.toDataURL("image/png") + '" width="' + this.WIDTH + '" height="' + this.HEIGHT + '"/>');
      return w;
    };

    EasyNote.prototype.showAll = function() {
      var bg, bgImg, bgURL, cnv, cnvImg, cnvURL, ctx, newCanvas, w,
        _this = this;
      w = window.open();
      cnv = this.canvas.getCanvas()._canvas;
      bg = this.background.getCanvas()._canvas;
      cnvURL = cnv.toDataURL();
      bgURL = bg.toDataURL();
      newCanvas = document.createElement('CANVAS');
      newCanvas.width = this.WIDTH;
      newCanvas.height = this.HEIGHT;
      ctx = newCanvas.getContext('2d');
      bgImg = new Image;
      bgImg.onload = function() {
        return ctx.drawImage(bgImg, 0, 0);
      };
      bgImg.src = bgURL;
      cnvImg = new Image;
      cnvImg.onload = function() {
        ctx.drawImage(cnvImg, 0, 0);
        return w.document.write('<img src="' + newCanvas.toDataURL("image/png") + '" width="' + _this.WIDTH + '" height="' + _this.HEIGHT + '"/>');
      };
      cnvImg.src = cnvURL;
      return w;
    };

    EasyNote.prototype.printCanvas = function() {
      var w;
      w = this.showCanvas();
      w.document.close();
      w.focus();
      w.print();
      return w.close();
    };

    EasyNote.prototype.printAll = function() {
      return window.print();
    };

    function EasyNote() {
      this.HEIGHT = Math.floor(this.WIDTH * 1.29411764706);
      this.setupStage();
      this.setupBackground();
      this.setupCanvas();
    }

    EasyNote.prototype.setupStage = function() {
      return this.stage = new Kinetic.Stage({
        container: 'easynote',
        width: this.WIDTH,
        height: this.HEIGHT
      });
    };

    EasyNote.prototype.setupBackground = function() {
      this.background = new Kinetic.Layer();
      this.grid();
      return this.stage.add(this.background);
    };

    EasyNote.prototype.setupCanvas = function() {
      var cnv,
        _this = this;
      this.canvas = new Kinetic.Layer();
      window.canvas = this.canvas;
      this.stage.add(this.canvas);
      this.extendCanvas();
      cnv = this.canvas.getCanvas()._canvas;
      $(cnv).on('mousedown touchstart', function(event) {
        var offset;
        event.preventDefault();
        offset = $(cnv).offset();
        return _this.canvas.beginLine(event.pageX - offset.left, event.pageY - offset.top);
      });
      $(cnv).on('mousemove touchmove', function(event) {
        var offset;
        event.preventDefault();
        offset = $(cnv).offset();
        return _this.canvas.drawLine(event.pageX - offset.left, event.pageY - offset.top);
      });
      return $(cnv).on('mouseup touchend', function() {
        event.preventDefault();
        return _this.canvas.endLine();
      });
    };

    EasyNote.prototype.extendCanvas = function() {
      this.canvas.drawing = false;
      this.canvas.context = this.canvas.getCanvas()._canvas.getContext('2d');
      this.canvas.penColor = this.PEN_COLOR_DEFAULT;
      this.canvas.penSize = this.PEN_SIZE_SMALL;
      this.canvas.context.lineCap = 'round';
      this.canvas.context.lineJoin = 'round';
      this.canvas.context.strokeStyle = this.canvas.penColor;
      this.canvas.context.lineWidth = this.canvas.penSize;
      this.canvas.beginLine = function(x, y) {
        this.drawing = true;
        this.context.strokeStyle = this.penColor;
        this.context.lineWidth = this.penSize;
        this.context.beginPath();
        return this.context.moveTo(x, y);
      };
      this.canvas.drawLine = function(x, y) {
        if (!this.drawing) {
          return;
        }
        this.context.lineTo(x, y);
        return this.context.stroke();
      };
      this.canvas.endLine = function() {
        return this.drawing = false;
      };
      this.canvas.startErasing = function() {
        this.context.globalCompositeOperation = 'destination-out';
        return this.context.strokeStyle = 'rgba(0,0,0,1)';
      };
      return this.canvas.startDrawing = function() {
        this.context.globalCompositeOperation = 'source-over';
        return this.context.strokeStyle = this.penColor;
      };
    };

    EasyNote.prototype.makeRule = function(coord, horizontal) {
      points;
      var points;
      if (horizontal) {
        points = [0, coord, this.WIDTH, coord];
      } else {
        points = [coord, 0, coord, this.HEIGHT];
      }
      return new Kinetic.Line({
        points: points,
        stroke: 'blue',
        strokeWidth: 1
      });
    };

    EasyNote.prototype.grid = function() {
      return this.makeRules('both');
    };

    EasyNote.prototype.makeRules = function(kind) {
      var line, lines, x, y, _i, _j, _k, _len, _ref, _ref1, _ref2, _ref3, _results;
      lines = [];
      if (kind === "horizontal" || kind === "both") {
        for (y = _i = 0, _ref = this.HEIGHT, _ref1 = this.LINE_SPACE; _ref1 > 0 ? _i <= _ref : _i >= _ref; y = _i += _ref1) {
          lines.push(this.makeRule(y, true));
        }
      }
      if (kind === "vertical" || kind === "both") {
        for (x = _j = 0, _ref2 = this.WIDTH, _ref3 = this.LINE_SPACE; _ref3 > 0 ? _j <= _ref2 : _j >= _ref2; x = _j += _ref3) {
          lines.push(this.makeRule(x, false));
        }
      }
      _results = [];
      for (_k = 0, _len = lines.length; _k < _len; _k++) {
        line = lines[_k];
        _results.push(this.background.add(line));
      }
      return _results;
    };

    EasyNote.prototype.redraw = function() {
      this.stage = null;
      this.setupStage();
      return this.stage.add(this.background);
    };

    return EasyNote;

  })();

}).call(this);
